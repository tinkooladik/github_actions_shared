name: Generate Release Notes and Create PR

on:
  push:
    branches:
      - 'version/*.*.*'

jobs:
  release-notes:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Extract version from branch name
        id: extract_version
        run: |
          branch_name=$(echo "${GITHUB_REF#refs/heads/}")
          version=${branch_name#version/}
          echo "VERSION=${version}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${branch_name}" >> $GITHUB_ENV

      - name: Check if PR from branch already exists
        id: check_pr
        uses: actions/github-script@v7
        with:
          script: |
            const { repo, owner } = context.repo;
            const branchName = process.env.BRANCH_NAME;
            
            // List pull requests with the specified head branch
            const { data: prs } = await github.rest.pulls.list({
              owner,
              repo,
              head: `${owner}:${branchName}`,
              state: 'open'
            });
            
            if (prs.length > 0) {
              console.log(`PR from branch ${branchName} already exists. Skipping other steps.`);
              core.setOutput('pr_exists', 'true');
            } else {
              core.setOutput('pr_exists', 'false');
            }

      - name: Get latest release version
        id: get_latest_release
        if: steps.check_pr.outputs.pr_exists == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const { repo, owner } = context.repo;

            // Fetch the latest release
            const { data: latestRelease } = await github.rest.repos.getLatestRelease({
              owner,
              repo
            });

            // Log the tag name
            console.log(`Latest release tag: ${latestRelease.tag_name}`);

            // Set the tag name as an output
            core.setOutput('latest_tag', latestRelease.tag_name);

      - name: Find merged PRs since last release
        id: merged_prs
        if: steps.check_pr.outputs.pr_exists == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              sort: 'updated',
              direction: 'desc',
              per_page: 100,
              base: 'main',
            });

            const lastReleaseTag = `${{ steps.get_latest_release.outputs.latest_tag }}`;
            const lastRelease = lastReleaseTag === "none" ? null : await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: lastReleaseTag,
            });

            const lastReleaseDate = lastRelease ? new Date(lastRelease.data.published_at) : new Date(0);

            // Log date
            console.log(`Latest release (${lastReleaseTag}) was published: ${lastReleaseDate}`);

            const mergedPrs = prs.filter(pr => 
              pr.merged_at && new Date(pr.merged_at) > lastReleaseDate
            );

            const prDetails = mergedPrs.map(pr => `- ${pr.html_url}`).join('\n');
            core.setOutput('merged_prs', prDetails || 'None');

      - name: Generate release notes
        id: generate_notes
        if: steps.check_pr.outputs.pr_exists == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const { repo, owner } = context.repo;
            const mergedPrs = `${{ steps.merged_prs.outputs.merged_prs }}`;
            const previousVersion = `${{ steps.get_latest_release.outputs.latest_tag }}`;
            const newVersion = process.env.VERSION;
            
            const releaseNotes = [
              `# Version ${newVersion}`,
              '',
              '## Release Notes',
              '',
              mergedPrs,
              '',
              `**Full Changelog**: https://github.com/${owner}/${repo}/compare/${previousVersion}...${newVersion}`
            ].join('\n');
            
            console.log(`Generated release notes:\n${releaseNotes}`);
            core.setOutput('release_notes', releaseNotes);

      - name: Create PR
        if: steps.check_pr.outputs.pr_exists == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const { repo, owner } = context.repo;
            const branchName = process.env.BRANCH_NAME;
            const version = process.env.VERSION;
            const releaseNotes = `${{ steps.generate_notes.outputs.release_notes }}`;

            // Create a new PR
            const { data: newPr } = await github.rest.pulls.create({
              owner: owner,
              repo: repo,
              title: `Version ${version}`,
              head: branchName,
              base: "main",
              body: releaseNotes,
            });

            console.log(`Created PR #${newPr.number}`);
            
            await github.rest.issues.addLabels({
              owner: owner,
              repo: repo,
              issue_number: newPr.number,
              labels: ['needs review'],
            });

            console.log(`Added 'needs review' label to PR #${newPr.number}`);
