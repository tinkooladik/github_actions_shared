name: RBAK shared deploy workflow

on:
  pull_request:
    types: [ labeled ]

jobs:
  release_shared:
    if: github.event.label.name == 'approved' && startsWith(github.head_ref, 'version/')
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Extract version name
        id: extract_version_name
        shell: bash
        run: |
          branch=${{ github.event.pull_request.head.ref }}
          echo "VERSION=$(echo "${branch#"${branch%%[0-9]*}"}")" >> $GITHUB_ENV

      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      - name: Push Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME=${{ env.VERSION }}
          git tag $TAG_NAME
          git push origin $TAG_NAME

      - name: Generate Release notes
        id: generate_notes
        uses: actions/github-script@v7
        with:
          script: |
            const { repo, owner } = context.repo;
            const tagName = '${{ env.VERSION }}';

            // Fetch the latest release
            let latestRelease;
            try {
              const { data } = await github.rest.repos.getLatestRelease({
                owner,
                repo
              });
              latestRelease = data.tag_name;
            } catch (error) {
              console.log('Error ${error.status}: ${error.data.message}');
              if (error.status === 404) {
                console.log('No releases found yet.');
                latestRelease = null;
              } else {
                throw error; // Rethrow if it's not a 404 error
              }
            }
            
            // Generate release notes
            const { data: releaseNotes } = await github.rest.repos.generateReleaseNotes({
              owner,
              repo,
              tag_name: tagName,
              previous_tag_name: latestRelease
            });
            
            console.log(`Generated release notes: ${releaseNotes.body}`);
            core.setOutput('release_notes', releaseNotes.body);

      - name: Create Release
        id: create_release
        uses: actions/github-script@v7
        with:
          script: |
            const { repo, owner } = context.repo;
            const tagName = '${{ env.VERSION }}';
            const releaseNotes = `${{ steps.generate_notes.outputs.release_notes }}`;
            
            // Create the release
            const { data: release } = await github.rest.repos.createRelease({
              owner,
              repo,
              tag_name: tagName,
              name: `Release ${tagName}`,
              body: releaseNotes
            });
            
            console.log(`Created release #${release.id} with tag ${tagName}`);

      - name: Delete pre-release versions
        if: ${{ inputs.delete-alphas }}
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ inputs.group-id }}.${{ inputs.artifact-id }}
          package-type: 'maven'
          min-versions-to-keep: 0
          delete-only-pre-release-versions: "true"
